[["/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/application/UserCreator.test.ts",{"fileContent":"import { UserCreator } from \"@contexts/User/Application/Create/UserCreator\";\nimport { FakeUser } from \"../domain/FakeUser\";\nimport { UserRepositoryMock } from \"../__mocks__/UserRepositoryMock\";\nimport { FakeCreateUserRequest } from \"./FakeCreateUserRequest\";\n\nlet repository: UserRepositoryMock;\nlet creator: UserCreator;\n\nbeforeEach(() => {\n    repository = new UserRepositoryMock();\n    creator = new UserCreator(repository);\n});\n\ndescribe('UserCreator', () => {\n    it('should create a valid user', async () => {\n        const request = FakeCreateUserRequest.random();\n        const user = FakeUser.fromRequest(request);\n        await creator.run(request);\n        repository.assertLastSavedUserIs(user);\n    })\n})\n","resolvedModuleNames":["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Application/Create/UserCreator.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/domain/FakeUser.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/__mocks__/UserRepositoryMock.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/application/FakeCreateUserRequest.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/User.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserRepository.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserEmail.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserId.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserName.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserPassword.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Shared/domain/Users/FakeUserId.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/application/CreateUserRequest.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/domain/FakeUserEmail.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/domain/FakeUserName.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/domain/FakeUserPassword.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/Nullable.ts"]}],["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Application/Create/UserCreator.ts",{"fileContent":"import { User } from \"@contexts/User/Domain/User\";\r\nimport { UserRepository } from \"@contexts/User/Domain/UserRepository\";\r\n\r\nexport class UserCreator {\r\n    constructor(private repository: UserRepository) {}\r\n\r\n    async run(params: {id: string, name: string, email: string, password: string}): Promise<void> {\r\n        const user = User.fromPrimitives(params);\r\n        this.repository.save(user);\r\n    }\r\n}\r\n","resolvedModuleNames":["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/User.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserRepository.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Domain/AggregateRoot.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserEmail.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserId.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserName.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserPassword.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/Nullable.ts"]}],["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/User.ts",{"fileContent":"import { AggregateRoot } from \"@contexts/Shared/Domain/AggregateRoot\";\r\nimport { UserEmail } from \"./UserEmail\";\r\nimport { UserId } from \"./UserId\";\r\nimport { UserName } from \"./UserName\";\r\nimport { UserPassword } from \"./UserPassword\";\r\n\r\nexport class User extends AggregateRoot {\r\n    readonly id: UserId;\r\n    readonly name: UserName;\r\n    readonly email: UserEmail;\r\n    readonly password: UserPassword;\r\n\r\n    constructor(id: UserId, name: UserName, email: UserEmail, password: UserPassword) {\r\n        super();\r\n        this.id = id;\r\n        this.name = name;\r\n        this.email = email;\r\n        this.password = password;\r\n    }\r\n\r\n    static create(id: UserId, name: UserName, email: UserEmail, password: UserPassword): User {\r\n        const user = new User(id, name, email, password);\r\n\r\n        return user;\r\n    }\r\n\r\n    static fromPrimitives(plainData: { id: string; name: string; email: string; password: string }): User {\r\n        return new User(\r\n            new UserId(plainData.id),\r\n            new UserName(plainData.name),\r\n            new UserEmail(plainData.email),\r\n            new UserPassword(plainData.password),\r\n        );\r\n    }\r\n\r\n    public toPrimitives() {\r\n        return {\r\n            id: this.id.value,\r\n            name: this.name.value,\r\n            email: this.email.value,\r\n            password: this.password.value,\r\n        };\r\n    }\r\n}\r\n","resolvedModuleNames":["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Domain/AggregateRoot.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserEmail.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserId.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserName.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserPassword.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/InvalidArgumentError.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/valueObject/StringValueObject.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/Uuid.ts"]}],["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Domain/AggregateRoot.ts",{"fileContent":"\r\nexport abstract class AggregateRoot {\r\n    abstract toPrimitives(): any;\r\n}\r\n","resolvedModuleNames":[]}],["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserEmail.ts",{"fileContent":"import { InvalidArgumentError } from \"@contexts/Shared/Infrastructure/InvalidArgumentError\";\r\nimport { StringValueObject } from \"@contexts/Shared/Infrastructure/valueObject/StringValueObject\";\r\n\r\nexport class UserEmail extends StringValueObject {\r\n    protected ensureChain(value: string): void {\r\n        super.ensureChain(value);\r\n        this.ensureIsAnEmail(value);\r\n    }\r\n\r\n    private ensureIsAnEmail(value: string): void {\r\n        if (!/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g.test(value)) {\r\n            throw new InvalidArgumentError(`The email [${value}] has not a valid email format`);\r\n        }\r\n    }\r\n}\r\n","resolvedModuleNames":["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/InvalidArgumentError.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/valueObject/StringValueObject.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/valueObject/ValueObject.ts"]}],["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/InvalidArgumentError.ts",{"fileContent":"export class InvalidArgumentError extends Error {}\r\n","resolvedModuleNames":[]}],["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/valueObject/StringValueObject.ts",{"fileContent":"import { InvalidArgumentError } from \"../InvalidArgumentError\";\r\nimport { ValueObject } from \"./ValueObject\";\r\n\r\nexport class StringValueObject extends ValueObject<string> {\r\n    protected ensureChain(value: string): void {\r\n        this.ensureItIsNotAnEmptyString(value);\r\n    }\r\n\r\n    private ensureItIsNotAnEmptyString(value: string) {\r\n        if (value.length < 1) {\r\n            throw new InvalidArgumentError('The value can not be empty');\r\n        }\r\n    }\r\n}\r\n","resolvedModuleNames":["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/InvalidArgumentError.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/valueObject/ValueObject.ts"]}],["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/valueObject/ValueObject.ts",{"fileContent":"import { InvalidArgumentError } from \"../InvalidArgumentError\";\r\n\r\nexport type Primitives = String | string | Boolean | boolean | Number | number | Date;\r\n\r\nexport abstract class ValueObject<T extends Primitives> {\r\n    readonly value;\r\n\r\n    constructor(value: T) {\r\n        this.ensureChain(value);\r\n        this.ensureItHasAValue(value);\r\n        this.value = value;\r\n    }\r\n\r\n    private ensureItHasAValue(value: T) {\r\n        if (!value) {\r\n            throw new InvalidArgumentError('A valid value has to be provided')\r\n        }\r\n    }\r\n\r\n    protected abstract ensureChain(value: T): void;\r\n\r\n    equals(other: ValueObject<T>): boolean {\r\n        return other.constructor.name === this.constructor.name && other.value === this.value;\r\n    }\r\n\r\n    toString(): string {\r\n        return this.value.toString();\r\n    }\r\n}\r\n","resolvedModuleNames":["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/InvalidArgumentError.ts"]}],["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserId.ts",{"fileContent":"import { Uuuid } from \"@contexts/Shared/Infrastructure/Uuid\";\r\n\r\nexport class UserId extends Uuuid {}\r\n","resolvedModuleNames":["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/Uuid.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/InvalidArgumentError.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/valueObject/StringValueObject.ts"]}],["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/Uuid.ts",{"fileContent":"import { InvalidArgumentError } from \"./InvalidArgumentError\";\r\nimport { StringValueObject } from \"./valueObject/StringValueObject\";\r\nimport validate from 'uuid-validate';\r\n\r\nexport class Uuuid extends StringValueObject {\r\n\r\n    constructor(value: string) {\r\n        super(value);\r\n    }\r\n\r\n    protected ensureChain(value: string): void {\r\n        super.ensureChain(value);\r\n        this.ensureIsValidUuid(value);\r\n    }\r\n\r\n    private ensureIsValidUuid(value: string): void {\r\n        if (!validate(value)) {\r\n            throw new InvalidArgumentError(`The value [${value}] is not a valid UUID`);\r\n        }\r\n    }\r\n\r\n}\r\n","resolvedModuleNames":["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/InvalidArgumentError.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/valueObject/StringValueObject.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/valueObject/ValueObject.ts"]}],["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserName.ts",{"fileContent":"import { InvalidArgumentError } from \"@contexts/Shared/Infrastructure/InvalidArgumentError\";\r\nimport { StringValueObject } from \"@contexts/Shared/Infrastructure/valueObject/StringValueObject\";\r\n\r\nexport class UserName extends StringValueObject {\r\n    protected ensureChain(value: string): void {\r\n        super.ensureChain(value);\r\n        this.ensureNameHasMoreThan5Chars(value);\r\n        this.ensureNameDontStartWithNumber(value);\r\n    }\r\n\r\n    private ensureNameHasMoreThan5Chars(value: string) {\r\n        if (value.length < 2) {\r\n            throw new InvalidArgumentError(`The name [${value}] has to be more than 2 characters`);\r\n        }\r\n    }\r\n\r\n    private ensureNameDontStartWithNumber(value: string) {\r\n        if (Number(value.charAt(0))) {\r\n            throw new InvalidArgumentError(`The name [${value}] can not start with a number`);\r\n        }\r\n    }\r\n}\r\n","resolvedModuleNames":["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/InvalidArgumentError.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/valueObject/StringValueObject.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/valueObject/ValueObject.ts"]}],["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserPassword.ts",{"fileContent":"import { InvalidArgumentError } from \"@contexts/Shared/Infrastructure/InvalidArgumentError\";\r\nimport { StringValueObject } from \"@contexts/Shared/Infrastructure/valueObject/StringValueObject\";\r\n\r\nexport class UserPassword extends StringValueObject {\r\n    protected ensureChain(value: string): void {\r\n        super.ensureChain(value);\r\n        this.ensureIsAValidPassword(value);\r\n    }\r\n\r\n    private ensureIsAValidPassword(value: string): void {\r\n        if (value.length < 8) {\r\n            throw new InvalidArgumentError(`The password is not enough`);\r\n        }\r\n    }\r\n}\r\n","resolvedModuleNames":["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/InvalidArgumentError.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/valueObject/StringValueObject.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/valueObject/ValueObject.ts"]}],["/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/domain/FakeUser.ts",{"fileContent":"import { User } from \"@src/Contexts/User/Domain/User\";\nimport { UserEmail } from \"@src/Contexts/User/Domain/UserEmail\";\nimport { UserId } from \"@src/Contexts/User/Domain/UserId\";\nimport { UserName } from \"@src/Contexts/User/Domain/UserName\";\nimport { UserPassword } from \"@src/Contexts/User/Domain/UserPassword\";\nimport { FakeUserId } from \"../../Shared/domain/Users/FakeUserId\";\nimport { CreateUserRequest } from \"../application/CreateUserRequest\";\nimport { FakeUserEmail } from \"./FakeUserEmail\";\nimport { FakeUserName } from \"./FakeUserName\";\nimport { FakeUserPassword } from \"./FakeUserPassword\";\n\nexport class FakeUser {\n    static create(id: UserId, name: UserName, email: UserEmail, password: UserPassword): User {\n        return new User(id, name, email, password);\n    }\n\n    static random(): User {\n        return this.create(\n            FakeUserId.random(),\n            FakeUserName.random(),\n            FakeUserEmail.random(),\n            FakeUserPassword.random()\n        )\n    }\n\n    static fromRequest(request: CreateUserRequest): User {\n        return this.create(\n            FakeUserId.create(request.id),\n            FakeUserName.create(request.name),\n            FakeUserEmail.create(request.email),\n            FakeUserPassword.create(request.password)\n        );\n    }\n}\n","resolvedModuleNames":["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/User.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserEmail.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserId.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserName.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserPassword.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Shared/domain/Users/FakeUserId.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/application/CreateUserRequest.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/domain/FakeUserEmail.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/domain/FakeUserName.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/domain/FakeUserPassword.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Domain/AggregateRoot.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/InvalidArgumentError.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/valueObject/StringValueObject.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/Uuid.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakeUuid.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/Nullable.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakeInteger.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakerCreator.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakeWord.ts"]}],["/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Shared/domain/Users/FakeUserId.ts",{"fileContent":"import { UserId } from \"@contexts/User/Domain/UserId\";\nimport { FakeUuuid } from \"@contexts-test/shared/FakeUuid\";\n\nexport class FakeUserId {\n    static create(value: string): UserId {\n        return new UserId(value);\n    }\n\n    static random(): UserId {\n        return this.create(FakeUuuid.random());\n    }\n}\n","resolvedModuleNames":["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserId.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakeUuid.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/Uuid.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakerCreator.ts"]}],["/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakeUuid.ts",{"fileContent":"import { FakerCreator } from \"./FakerCreator\";\n\nexport class FakeUuuid {\n    static random(): string {\n        return FakerCreator.random().datatype.uuid();\n    }\n}\n","resolvedModuleNames":["/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakerCreator.ts"]}],["/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakerCreator.ts",{"fileContent":"import * as faker from 'faker';\n\nexport class FakerCreator {\n    static random(): Faker.FakerStatic {\n        return faker;\n    }\n}\n","resolvedModuleNames":[]}],["/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/domain/FakeUserEmail.ts",{"fileContent":"import { Nullable } from \"@src/Contexts/Shared/Infrastructure/Nullable\";\nimport { UserEmail } from \"@src/Contexts/User/Domain/UserEmail\";\nimport { FakeInteger } from \"@tests/contexts/shared/FakeInteger\";\nimport { FakerCreator } from \"@tests/contexts/shared/FakerCreator\";\nimport { FakeWord } from \"@tests/contexts/shared/FakeWord\";\n\nexport class FakeUserEmail {\n    static create(value: string): UserEmail {\n        return new UserEmail(value);\n    }\n\n    static random(): UserEmail {\n        return new UserEmail(FakerCreator.random().internet.email());\n    }\n\n    static invalid(caseName: 'type' | 'format' | 'empty' | 'undefined'): Nullable<string | number> {\n        switch (caseName) {\n            case 'type':\n                return FakeInteger.random();\n            case 'format':\n                return `${FakeWord.random({ maxLength: 5 })}`;\n            case 'empty':\n                return '';\n            case 'undefined':\n                return undefined;\n            default:\n                break;\n        }\n    }\n}\n","resolvedModuleNames":["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/Nullable.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserEmail.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakeInteger.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakerCreator.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakeWord.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/InvalidArgumentError.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/valueObject/StringValueObject.ts"]}],["/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakeInteger.ts",{"fileContent":"import { FakerCreator } from \"./FakerCreator\";\n\nexport class FakeInteger {\n    static random(max?: number): number {\n        return FakerCreator.random().datatype.number(max);\n    }\n}\n","resolvedModuleNames":["/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakerCreator.ts"]}],["/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakeWord.ts",{"fileContent":"import { FakerCreator } from \"./FakerCreator\";\n\nexport class FakeWord {\n    static random({ minLength = 0, maxLength }: { minLength?: number; maxLength: number }): string {\n        return (\n            FakerCreator.random().lorem.word(\n                Math.floor(Math.random() * (maxLength - minLength)) + minLength\n            ) || 'word'\n        );\n    }\n}\n","resolvedModuleNames":["/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakerCreator.ts"]}],["/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/domain/FakeUserName.ts",{"fileContent":"import { Nullable } from \"@src/Contexts/Shared/Infrastructure/Nullable\";\nimport { UserName } from \"@src/Contexts/User/Domain/UserName\";\nimport { FakeInteger } from \"@tests/contexts/shared/FakeInteger\";\nimport { FakerCreator } from \"@tests/contexts/shared/FakerCreator\";\nimport { FakeWord } from \"@tests/contexts/shared/FakeWord\";\n\nexport class FakeUserName {\n    static create(value: string): UserName {\n        return new UserName(value);\n    }\n\n    static random(): UserName {\n        return this.create(FakerCreator.random().name.firstName());\n    }\n\n    static invalidName(caseName: 'type' | 'length' | 'empty' | 'undefined'): Nullable<string | number> {\n        switch (caseName) {\n            case 'type':\n                return FakeInteger.random();\n            case 'length':\n                return FakeWord.random({ minLength: 20, maxLength: 30 });\n            case 'empty':\n                return '';\n            case 'undefined':\n                return undefined;\n            default: \n                break;\n        }\n    } \n}\n","resolvedModuleNames":["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/Nullable.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserName.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakeInteger.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakerCreator.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakeWord.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/InvalidArgumentError.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/valueObject/StringValueObject.ts"]}],["/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/domain/FakeUserPassword.ts",{"fileContent":"import { Nullable } from \"@src/Contexts/Shared/Infrastructure/Nullable\";\nimport { UserPassword } from \"@src/Contexts/User/Domain/UserPassword\";\nimport { FakeInteger } from \"@tests/contexts/shared/FakeInteger\";\nimport { FakerCreator } from \"@tests/contexts/shared/FakerCreator\";\nimport { FakeWord } from \"@tests/contexts/shared/FakeWord\";\n\nexport class FakeUserPassword {\n    static create(value: string): UserPassword {\n        return new UserPassword(value);\n    }\n\n    static random(): UserPassword {\n        return new UserPassword(FakerCreator.random().internet.password(8, false, /\\w/, '!A0o'));\n    }\n\n    static invalid(caseName: 'type' | 'length' | 'format' | 'empty' | 'undefined'): Nullable<string | number> {\n        switch (caseName) {\n            case 'type':\n                return FakeInteger.random();\n            case 'length':\n                return FakeWord.random({ maxLength: 3 });\n            case 'format':\n                return FakerCreator.random().internet.password(8, false, /\\w/, 'A');\n            case 'empty':\n                return '';\n            case 'undefined':\n                return undefined;\n            default:\n                break;\n        }\n    }\n}\n","resolvedModuleNames":["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/Nullable.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserPassword.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakeInteger.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakerCreator.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakeWord.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/InvalidArgumentError.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/valueObject/StringValueObject.ts"]}],["/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/__mocks__/UserRepositoryMock.ts",{"fileContent":"import { Nullable } from \"@src/Contexts/Shared/Infrastructure/Nullable\";\nimport { User } from \"@src/Contexts/User/Domain/User\";\nimport { UserId } from \"@src/Contexts/User/Domain/UserId\";\nimport { UserRepository } from \"@src/Contexts/User/Domain/UserRepository\";\n\nexport class UserRepositoryMock implements UserRepository {\n    private readonly mockSave;\n    \n    constructor() {\n        this.mockSave = jest.fn();\n    }\n    findAll(): Promise<User[]> {\n        throw new Error(\"Method not implemented.\");\n    }\n    findOne(userId: UserId): Promise<Nullable<User>> {\n        throw new Error(\"Method not implemented.\");\n    }\n    delete(userId: UserId): Promise<void> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    async save(user: User): Promise<void> {\n        await this.mockSave(user);\n    }\n\n    assertLastSavedUserIs(expected: User): void {\n        const mock = this.mockSave.mock;\n        const lastSavedUser = (mock.calls[mock.calls.length - 1] as User[])[0];\n        expect(lastSavedUser).toBeInstanceOf(User);\n        expect(lastSavedUser.id).toEqual(expected.id);\n    }\n\n    assertSaveHaveBeenCalled(expected: User) {\n        expect(this.mockSave).toHaveBeenCalledWith(expected);\n    }\n}\n","resolvedModuleNames":["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/Nullable.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/User.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserId.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserRepository.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Domain/AggregateRoot.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserEmail.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserName.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserPassword.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/Uuid.ts"]}],["/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/application/FakeCreateUserRequest.ts",{"fileContent":"import { UserEmail } from \"@src/Contexts/User/Domain/UserEmail\";\nimport { UserId } from \"@src/Contexts/User/Domain/UserId\";\nimport { UserName } from \"@src/Contexts/User/Domain/UserName\";\nimport { UserPassword } from \"@src/Contexts/User/Domain/UserPassword\";\nimport { FakeUserId } from \"../../Shared/domain/Users/FakeUserId\";\nimport { FakeUserEmail } from \"../domain/FakeUserEmail\";\nimport { FakeUserName } from \"../domain/FakeUserName\";\nimport { FakeUserPassword } from \"../domain/FakeUserPassword\";\nimport { CreateUserRequest } from \"./CreateUserRequest\";\n\nexport class FakeCreateUserRequest {\n    static create(id: UserId, name: UserName, email: UserEmail, password: UserPassword): CreateUserRequest {\n        return {\n            id: id.value,\n            name: name.value,\n            email: email.value,\n            password: password.value\n        };\n    }\n\n    static random(): CreateUserRequest {\n        return this.create(\n            FakeUserId.random(),\n            FakeUserName.random(),\n            FakeUserEmail.random(),\n            FakeUserPassword.random()\n        );\n    }\n\n    static invalidRequest(): CreateUserRequest {\n        return {\n            id: FakeUserId.random().value,\n            name: FakeUserName.invalidName('type') as string,\n            email: FakeUserEmail.invalid('format') as string,\n            password: FakeUserPassword.invalid('format') as string\n        };\n    }\n}\n","resolvedModuleNames":["/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserEmail.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserId.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserName.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/User/Domain/UserPassword.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Shared/domain/Users/FakeUserId.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/domain/FakeUserEmail.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/domain/FakeUserName.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/domain/FakeUserPassword.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/backend/Users/application/CreateUserRequest.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/InvalidArgumentError.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/valueObject/StringValueObject.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/Uuid.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakeUuid.ts","/home/ibetanzos/dev/node-ddd-hex-testing/src/Contexts/Shared/Infrastructure/Nullable.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakeInteger.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakerCreator.ts","/home/ibetanzos/dev/node-ddd-hex-testing/tests/contexts/shared/FakeWord.ts"]}]]