11ac0e9033711c2d324e6abe22e32736
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserRepositoryMock = void 0;
const User_1 = require("@src/Contexts/User/Domain/User");
class UserRepositoryMock {
    constructor() {
        this.mockSave = jest.fn();
    }
    findAll() {
        throw new Error("Method not implemented.");
    }
    findOne(userId) {
        throw new Error("Method not implemented.");
    }
    delete(userId) {
        throw new Error("Method not implemented.");
    }
    save(user) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.mockSave(user);
        });
    }
    assertLastSavedUserIs(expected) {
        const mock = this.mockSave.mock;
        const lastSavedUser = mock.calls[mock.calls.length - 1][0];
        expect(lastSavedUser).toBeInstanceOf(User_1.User);
        expect(lastSavedUser.id).toEqual(expected.id);
    }
    assertSaveHaveBeenCalled(expected) {
        expect(this.mockSave).toHaveBeenCalledWith(expected);
    }
}
exports.UserRepositoryMock = UserRepositoryMock;
